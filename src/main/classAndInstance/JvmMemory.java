package main.classAndInstance;

public class JvmMemory {
    /**
     * JVM 메모리 구조
     * 
     * 자바 애플리케이션이 실행되면 JVM 은 시스템으로부터 프로그램 수행에 필요한 메모리를 할당받고, JVM 은 메모리를 용도에 따라 여러 영역으로 나누어 관리한다.
     * JVM 의 주요 영역은 method area, call stack, heap 등이 있다.
     * 
     * - method area
     * 
     * 프로그램 실행 중, 어떤 클래스가 사용되면, JVM 은 해당 클래스의 클래스 파일을 읽어서 분석하여 클래스에 대한 정보를 메서드 영역에 저장한다.
     * 이때 그 클래스의 클래스 변수 (static 변수) 도 이 영역에 함께 생성된다.
     * 
     * - call stack
     * 
     * 호출 스택은 메서드의 작업에 필요한 메모리 공간을 제공한다.
     * 메서드가 호출되면 호출된 메서드를 위한 메모리가 할당되는데, 이 메모리는 메서드가 작업을 수행하는 동안 매개변수를 포함한 지역변수들과 중간 결과를 저장하는데 사용된다.
     * 메서드가 작업을 마치면 호출 스택에서 할당되었던 메모리는 반환된다.
     * 
     * - heap
     * 
     * 인스턴스가 생성되는 공간으로 프로그램 실행 중에 동적으로 생성되는 인스턴스가 저장된다.
     * 각 메서드를 위한 메모리 상 작업 공간은 서로 구별되며,
     * 첫번째로 호출된 메서드를 위한 작업 공간이 호출 스택의 맨 아래에 할당되고, 이어서 호출되는 메서드들이 그 위에 쌓이는 방식으로 메모리가 할당된다.
     * 메서드가 종료되면 메모리 공간이 제거되고 아래에 있는 이전 메서드로 돌아간다.
     */
}
